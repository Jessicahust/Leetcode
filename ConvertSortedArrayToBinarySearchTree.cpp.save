#include<iostream>
#include<new>
#include<vector>
using namespace std;

//Definition for binary tree
struct TreeNode
{
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

class Solution
{
public:
    TreeNode *sortedArrayToBST(vector<int> &num)
    {
        if(num.empty())
            return NULL;
        TreeNode *root=NULL;
        int i;
        for(i=0; i<num.size(); i++)
            insert(root,num[i]);
    }
    void insert(TreeNode *&root,int key)
    {
        int lhigh,rhigh;
        if(root==NULL)
        {
            root=new TreeNode(key);
            if(root==NULL)
                return;
        }
        else if(key<root->val)
        {
            insert(root->left,key);
            lhigh=maxDepth(root->left);
            rhigh=maxDepth(root->right);
            if(abs(lhigh-rhigh)>1)
            {
                if(key<root->left->val)
                    SingleRotateWithLeft(root);
                else
                    DoubleRotateWithLeft(root);
            }
        }
        else
        {
            insert(root->right,key)
            lhigh=maxDepth(root->left);
            rhigh=maxDepth(root->right);
            if(abs(lhigh-rhigh)>1)
            {
                if(key>root->right->val)
                    SingleRotateWithRight(root);
                else
                    DoubleRotateWithLeft(root);
            }
        }
    }
    int maxDepth(TreeNode *root)
    {
        if(root)
        {
            if(root->left==NULL&&root->right==NULL)
                return 1;
            int leftDepth=maxDepth(root->left);
            int rightDepth=maxDepth(root->right);
            return leftDepth>= rightDepth ?(leftDepth+1):(rightDepth+1);
        }
        return 0;
    }
    void SingleRotateWithLeft(TreeNode *&root)
    {
        TreeNode *l=root->left;
        root->left=l->right;
        l->right=root;
    }
    void SingleRotateWithRight(TreeNode *&root)
    {
        TreeNode *r=root->right;
        root->right=r->left;
        r->left=root;
    }
    void DoubleRotateWithLeft(TreeNode *&root)
    {
        SingleRotateWithRight(root->left);
        SingleRotateWithLeft(root);
    }
    void DoubleRotate
};
