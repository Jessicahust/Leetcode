#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

struct Interval
{
    int start;
    int end;
    Interval():start(0),end(0) {}
    Interval(int s,int e):start(s),end(e) {}
};

class Solution
{
public:
    vector<Interval> insert(vector<Interval> &intervals, Interval newInterval)
    {
        if(intervals.empty())
            return vector<Interval>();
        if(intervals.size()==1)
            return intervals;
        vector<Interval> ret;
        int flag=0;
        int i;
        for(i=0; i<(int)intervals.size(); i++)
        {
            if(newInterval.start>intervals[i].end)
            {
                ret.push_back(intervals[i]);
            }
            else if(newInterval.end<intervals[i].start)
            {
                flag=1;
                ret.push_back(newInterval);
                ret.push_back(intervals[i]);
            }
            else
            {
                newInterval.start=min(newInterval.start,intervals[i].start);
                newInterval.end=max(newInterval.end,intervals[i].end);
            }
        }
        if(flag==0)
            ret.push_back(newInterval);
        return ret;
    }
    //注意，为什么要使用static呢？因为sort不是成员函数，不能直接调用类中的成员函数需要类的对象或类来调用，也可以将比较函数定义在类的外面成为非成员函数
    //还有就是不能加入等号，因为sort是严格递增的
    static bool mycompare(const Interval &a,const Interval &b)
    {
        return a.start<b.start;
    }
};

int main()
{
    Solution s;
    Interval a1(1,3);
    Interval a2(2,6);
    Interval a3(8,10);
    Interval a4(15,18);
    vector<Interval> intervals= {a1,a2,a3,a4};
    vector<Interval> result=s.merge(intervals);
    for(auto a:result)
        cout<<"[ "<<a.start<<" , "<<a.end<<" ]"<<endl;
}

