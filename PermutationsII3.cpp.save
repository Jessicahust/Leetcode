#include<iostream>
#include<vector>
#include<algorithm>
#include<cstring>
using namespace std;

class Solution
{
public:
    vector<vector<int> > permuteUnique(vector<int> &num)
    {
        vector<vector<int>> res = new vector<vector<int>>();
        if(num==null && num.length==0)
            return res;
        sort(num);
        helper(num, new boolean[num.length], new ArrayList<Integer>(), res);
        return res;
    }
    private void helper(int[] num, boolean[] used, ArrayList<Integer> item, ArrayList<ArrayList<Integer>> res)
    {
        if(item.size() == num.length)
        {
            res.add(new ArrayList<Integer>(item));
            return;
        }
        for(int i=0; i<num.length; i++)
        {
            if(i>0 && !used[i-1] && num[i]==num[i-1]) continue;
            if(!used[i])
            {
                used[i] = true;
                item.add(num[i]);
                helper(num, used, item, res);
                item.remove(item.size()-1);
                used[i] = false;
            }
        }
    }
};

int main()
{
    Solution s;
    vector<int> vec= {3,3,0,0,2,3,2};
    vector<vector<int> > result=s.permuteUnique(vec);
    for(auto a:result)
    {
        for(auto v:a)
            cout<<v<<" ";
        cout<<endl;
    }
    cout<<result.size()<<endl;
}



