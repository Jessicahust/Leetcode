#include<iostream>
#include<vector>
using namespace std;

class Solution {
public:
    void solveSudoku(vector<vector<char> > &board) {
        if(board.empty()||board[0].size()!=9||board.size()!=9)
            return ;
        helper(board,0,0);
    }
    bool helper(vector<vector<char> > &board,int row,int col)
    {
        if(col>9)
            return helper(board,row+1,0);
        if(row>9)
            return true;
        if(board[row][col]=='.')
        {
            for(int k=1;k<=9;k++)
            {
                board[row][col]=k+'0';
                if(isValid(board,row,col))
                {
                    if(helper(board,row,col+1))
                        return true;
                }
            }
            board[row][col]='.';
        }
        else
            return helper(board,row,col+1);
        return false;
    }
    bool isValid(vector<vector<char> > &board,int row,int col)
    {
        int i,j,k;
        for(i=0;i<9;i++)
            if(board[i][col]==board[row][col]&&i!=row)
                return false;
        for(j=0;j<9;j++)
            if(board[row][j]==board[row][col]&&j!=col)
                return false;
        for(i=3*row/3;i<3*row/3+3;i++)
            for(j=3*col/3;j<3*col/3+3;j++)
                if(board[i][j]==board[row][col]&&(i!=row||j!=col))
                    return false;
        return true;
    }
};

int main()
{
    Solution s;
    vector<vector<char> > vec={{'5','3','.','.','7','.','.','.','.'},
    {'6','.','.','1','9','5','.','.','.'},
    {'.','9','8','.','.','.','.','6','.'},
    {'8','.','.','.','6','.','.',
    
}